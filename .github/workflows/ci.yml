name: CI Pipeline
on: [push]
jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - name: Format check
        run: echo "Format check"

  build:
    strategy:
      fail-fast: false
      matrix: 
        os: [ubuntu-latest, windows-latest, macos-latest]
        cmake-build-type: [Debug, Release]
    needs: format
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Source Code and Submodules
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Configure
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.cmake-build-type }} -DXE_DEV_WARNINGS_AS_ERRORS=OFF -DXE_DEV_UNIT_TEST=ON 

      - name: Build
        run: cmake --build build --parallel 4

      - name: Run unit tests
        run: cd build && ctest --output-on-failure

  lint:
    needs: build
    strategy:
      fail-fast: false
      matrix: 
        cmake-build-type: [Debug, Release]
    runs-on: ubuntu-latest
    steps:
      - name: Install clang-tidy
        run: sudo apt-get update && sudo apt-get install clang-tidy

      - name: Checkout Source Code and Submodules
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Configure
        run: CC=clang CXX=clang++ cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.cmake-build-type }} -DXE_DEV_WARNINGS_AS_ERRORS=OFF -DXE_DEV_UNIT_TEST=ON -DCMAKE_CXX_CLANG_TIDY=clang-tidy

      - name: Build
        run: cmake --build build --parallel 4

  coverage:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: false
      matrix: 
        cmake-build-type: [Debug, Release]
    steps:
      - name: Checkout Source Code and Submodules
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Configure
        run: CC=clang CXX=clang++ cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.cmake-build-type }} -DXE_DEV_WARNINGS_AS_ERRORS=OFF -DXE_DEV_UNIT_TEST=ON -DXE_DEV_INSTRUMENT_COVERAGE=ON

      - name: Build
        run: cmake --build build --parallel 4

      - name: Run unit tests
        run: cd build && ctest --output-on-failure

      - name: Check Coverage > 80%
        run: echo "Add collector"

  asan:
    runs-on: ubuntu-latest
    needs:
      - coverage
      - lint
    steps:
      - name: check
        run: echo "check"

  ubsan:
    runs-on: ubuntu-latest
    needs:
      - coverage
      - lint
    steps:
      - name: check
        run: echo "check"

  msan:
    runs-on: ubuntu-latest
    needs:
      - coverage
      - lint
    steps:
      - name: check
        run: echo "check"
