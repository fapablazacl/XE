name: CI Pipeline
on: [push]
jobs:
  formatting-check:
    name: check format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        path:
          - check: 'src/engine'
            exclude: '(dependencies)'
    steps:
    - uses: actions/checkout@v3
    - name: Run clang-format style check for C/C++/Protobuf programs.
      uses: jidicula/clang-format-action@v4.10.1
      continue-on-error: true
      with:
        clang-format-version: '15'
        check-path: ${{ matrix.path['check'] }}
        exclude-regex: ${{ matrix.path['exclude'] }}

  build:
    strategy:
      fail-fast: false
      matrix: 
        cmake-build-type: [Debug, Release]
        config:
        - os: ubuntu-latest
          generator: Unix Makefiles
          prologue: sudo apt-get update && sudo apt-get install libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libgl-dev

        - os: macos-latest
          generator: Unix Makefiles
          prologue: ""

        - os: windows-latest
          generator: NMake Makefiles
          prologue: .\Invoke-Environment.ps1 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          
    runs-on: ${{ matrix.config.os }}
    steps:
      - name: Checkout Source Code and Submodules
        uses: actions/checkout@v3
        with:
          submodules: true
        
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Configure
        run:
          cmake -G "${{matrix.config.generator}}" -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.cmake-build-type }} -DXE_DEV_WARNINGS_AS_ERRORS=ON -DXE_DEV_UNIT_TEST=ON 

      - name: Build
        run: cmake --build build --parallel 4

      - name: Run unit tests
        run: cd build && ctest --output-on-failure

  clang-tidy:
    needs: build
    strategy:
      fail-fast: false
      matrix: 
        cmake-build-type: [Debug, Release]
    runs-on: ubuntu-latest
    steps:
      - name: Install clang-tidy
        run: sudo apt-get update && sudo apt-get install clang-tidy

      - name: Checkout Source Code and Submodules
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Configure
        run: CC=clang CXX=clang++ cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.cmake-build-type }} -DXE_DEV_WARNINGS_AS_ERRORS=OFF -DXE_DEV_UNIT_TEST=OFF -DXE_DEV_LINT_CLANG_TIDY=ON

      - name: Build
        run: cmake --build build --parallel 4

  sonar-scanner:
    needs: build
    runs-on: ubuntu-latest
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Configure
        run: CC=clang CXX=clang++ cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DXE_DEV_WARNINGS_AS_ERRORS=OFF -DXE_DEV_UNIT_TEST=OFF -DXE_DEV_LINT_CLANG_TIDY=ON

      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v1
      - name: Run build-wrapper
        run: |
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build --parallel 4
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"

  coverage:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: false
      matrix: 
        cmake-build-type: [Debug, Release]
    steps:
      - name: Install clang-tidy
        run: sudo apt-get update && sudo apt-get install llvm

      - name: Checkout Source Code and Submodules
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Configure
        run: CC=clang CXX=clang++ cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.cmake-build-type }} -DXE_DEV_WARNINGS_AS_ERRORS=OFF -DXE_DEV_UNIT_TEST=ON -DXE_DEV_INSTRUMENT_COVERAGE=ON

      - name: Build
        run: cmake --build build --parallel 4

      - name: Run unit tests
        run: cd build && ctest --output-on-failure

      - name: Generate Coverage Information
        run: XB_BUILD_DIR=build ./xbcli coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3

  asan:
    runs-on: ubuntu-latest
    needs:
      - coverage
      - lint
    steps:
      - name: check
        run: echo "check"

  ubsan:
    runs-on: ubuntu-latest
    needs:
      - coverage
      - lint
    steps:
      - name: check
        run: echo "check"

  msan:
    runs-on: ubuntu-latest
    needs:
      - coverage
      - lint
    steps:
      - name: check
        run: echo "check"
