#!/bin/bash

# Build Utility Tool for XE, on Unix platforms.
# Supports Debug and Release build, using GCC and CLANG compilers.
# Tested on:
#   ArchLinux, with Zen Kernel.

# Mode
MODE_INSTALLDEPS="installdeps"
MODE_CONFIGURE="configure"
MODE=$1

if [ \( "$MODE" != "$MODE_INSTALLDEPS" \) -a \( "$MODE" != "$MODE_CONFIGURE" \) ]; then
    echo "Supplied mode \"$TOOLCHAIN\" is unknown."
    echo "  $MODE_INSTALLDEPS"
    echo "  $MODE_CONFIGURE"
    echo "Are the only known options"
    exit 1
fi


# Process toolchain
TOOLCHAIN_GCC="gcc"
TOOLCHAIN_CLANG="clang"
TOOLCHAIN=$2
if [ \( "$TOOLCHAIN" != "$TOOLCHAIN_GCC" \) -a \( "$TOOLCHAIN" != "$TOOLCHAIN_CLANG" \) ]; then
    echo "Supplied toolchain \"$TOOLCHAIN\" is unknown."
    echo "  $TOOLCHAIN_GCC"
    echo "  $TOOLCHAIN_CLANG"
    echo "Are the only known options"
    exit 1
fi

if [ \( "$TOOLCHAIN" = "$TOOLCHAIN_GCC" \) ]; then
    export CC=gcc 
    export CXX=g++
fi

if [ "$TOOLCHAIN" == "$TOOLCHAIN_CLANG" ]; then
    export CC=clang
    export CXX=clang++
fi


# Process build type
BUILD_TYPE_DEBUG="debug"
BUILD_TYPE_RELEASE="release"
BUILD_TYPE=$3
if [ \( "$BUILD_TYPE" != "$BUILD_TYPE_DEBUG" \) && \( "$BUILD_TYPE" != "$BUILD_TYPE_RELEASE" \) ]; then
    echo "Supplied build type \"$BUILD_TYPE\" is unknown"
    echo "  $BUILD_TYPE_DEBUG"
    echo "  $BUILD_TYPE_RELEASE"
    echo "Are the only known options."
    exit 1
fi

if [ "$BUILD_TYPE" == "$BUILD_TYPE_DEBUG" ]; then
    CMAKE_BUILD_TYPE="Debug"
fi

if [ "$BUILD_TYPE" == "$BUILD_TYPE_RELEASE" ]; then
    CMAKE_BUILD_TYPE="Release"
fi

SOURCE_PREFIX="$PWD/dependencies"
BUILD_PREFIX="$PWD/dependencies/.build"
INSTALL_PREFIX="$PWD/local"

# variables for dependencies
CATCH2_BUILD_DIR="$BUILD_PREFIX/$TOOLCHAIN/Catch2"
CATCH2_SOURCE_DIR="$SOURCE_PREFIX/Catch2"
CATCH2_INSTALL_PREFIX="$INSTALL_PREFIX/$TOOLCHAIN/Catch2"

GLADES_BUILD_DIR="$BUILD_PREFIX/$TOOLCHAIN/glades2/$BUILD_TYPE"
GLADES_SOURCE_DIR="$SOURCE_PREFIX/glades2"
GLADES_INSTALL_PREFIX="$INSTALL_PREFIX/$TOOLCHAIN/glades2"

GLFW3_BUILD_DIR="$BUILD_PREFIX/$TOOLCHAIN/glfw/$BUILD_TYPE"
GLFW3_SOURCE_DIR="$SOURCE_PREFIX/glfw"
GLFW3_INSTALL_PREFIX="$INSTALL_PREFIX/$TOOLCHAIN/glfw"

GLBINDING_BUILD_DIR="$BUILD_PREFIX/$TOOLCHAIN/glbinding/$BUILD_TYPE"
GLBINDING_SOURCE_DIR="$SOURCE_PREFIX/glbinding"
GLBINDING_INSTALL_PREFIX="$INSTALL_PREFIX/$TOOLCHAIN/glbinding"

install_dependencies(){
    # build catch
    # header-only-lib
    
    cmake -B$CATCH2_BUILD_DIR -S$CATCH2_SOURCE_DIR -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=$CATCH2_INSTALL_PREFIX -DCATCH_BUILD_TESTING=OFF -DCATCH_INSTALL_DOCS=OFF
    cmake --build $CATCH2_BUILD_DIR
    cmake --install $CATCH2_BUILD_DIR

    # build glades2
    cmake -B$GLADES_BUILD_DIR -S$GLADES_SOURCE_DIR -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DCMAKE_INSTALL_PREFIX=$GLADES_INSTALL_PREFIX
    cmake --build $GLADES_BUILD_DIR
    cmake --install $GLADES_BUILD_DIR

    # build glfw
    cmake -B$GLFW3_BUILD_DIR -S$GLFW3_SOURCE_DIR -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DCMAKE_INSTALL_PREFIX=$GLFW3_INSTALL_PREFIX -DGLFW_BUILD_DOCS=OFF -DGLFW_BUILD_EXAMPLES=OFF -DGLFW_BUILD_TESTS=OFF
    cmake --build $GLFW3_BUILD_DIR
    cmake --install $GLFW3_BUILD_DIR

    # build glbinding
    cmake -B$GLBINDING_BUILD_DIR -S$GLBINDING_SOURCE_DIR -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DCMAKE_INSTALL_PREFIX=$GLBINDING_INSTALL_PREFIX -DOPTION_BUILD_EXAMPLES=OFF -DOPTION_BUILD_TOOLS=OFF -DBUILD_SHARED_LIBS=OFF
    cmake --build $GLBINDING_BUILD_DIR
    cmake --install $GLBINDING_BUILD_DIR
}


configure(){
    cmake -B "build/$TOOLCHAIN/$BUILD_TYPE" \
        -G "Unix Makefiles" \
        -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
        -DXE_PLUGIN_GL=ON -DXE_PLUGIN_ES2=ON -DXE_PLUGIN_GL_GLFW=ON -DXE_PLUGIN_VULKAN=ON -DXE_UNIT_TEST=ON \
        -Dglfw3_DIR="$GLFW3_INSTALL_PREFIX/lib/cmake/glfw3" \
        -Dglbinding_DIR="$GLBINDING_INSTALL_PREFIX" \
        -Dglades2_DIR="$GLADES_INSTALL_PREFIX/lib/cmake/glades2" \
        -DCatch2_DIR="$CATCH2_INSTALL_PREFIX/lib/cmake/Catch2"
}


if [ "$MODE" == "$MODE_INSTALLDEPS" ]; then
    install_dependencies
fi

if [ "$MODE" == "$MODE_CONFIGURE" ]; then
    configure
fi
