#!/bin/bash

# Build Utility Tool for XE, on Unix platforms.
# Pending rewrite in C++.
# Supports Debug and Release build, using GCC and CLANG compilers.
# Tested on:
#   ArchLinux, with Zen Kernel.
#   macOS - Universal Binary arm64/x86_64

# NOTES:
# coverage for gcc
#   lcov -c -d .build/gcc-7.3.1/coverage/src/ -o coverage.info
#   genhtml coverage.info -o out

# Clone specific branch:
#   git clone --depth 1 --branch v3.1.0 https://github.com/cginternals/glbinding.git dep/glbinding

# Flags used in all configurations
XE_C_FLAGS="-Wall"
XE_LD_FLAGS=""

# Mode
MODE_INSTALLDEPS="installdeps"
MODE_CONFIGURE="configure"
MODE_COVERAGE="coverage"
MODE=$1

if [ \( "$MODE" != "$MODE_INSTALLDEPS" \) -a \( "$MODE" != "$MODE_CONFIGURE" \) -a \( "$MODE" != "$MODE_COVERAGE" \) ]; then
    echo "Supplied mode \"$MODE\" is unknown."
    echo "  $MODE_INSTALLDEPS"
    echo "  $MODE_CONFIGURE"
    echo "  $MODE_COVERAGE"
    echo "Are the only known options"
    exit 1
fi

# Process toolchain
TOOLCHAIN_GCC="gcc"
TOOLCHAIN_CLANG="clang"
TOOLCHAIN=$2
if [ \( "$TOOLCHAIN" != "$TOOLCHAIN_GCC" \) -a \( "$TOOLCHAIN" != "$TOOLCHAIN_CLANG" \) ]; then
    echo "Supplied toolchain \"$TOOLCHAIN\" is unknown."
    echo "  $TOOLCHAIN_GCC"
    echo "  $TOOLCHAIN_CLANG"
    echo "Are the only known options"
    exit 1
fi

COVERAGE_CC_FLAGS=""
COVERAGE_LD_FLAGS=""
if [ \( "$TOOLCHAIN" = "$TOOLCHAIN_GCC" \) ]; then
    export CC=gcc
    export CXX=g++
    # Toolchain path in macOS 
    # export CC=/opt/homebrew/Cellar/gcc/11.2.0_3/bin/gcc-11
    # export CXX=/opt/homebrew/Cellar/gcc/11.2.0_3/bin/g++-11

    COVERAGE_CC_FLAGS="-fprofile-arcs -ftest-coverage"
    COVERAGE_LD_FLAGS="--coverage"
fi

if [ "$TOOLCHAIN" = "$TOOLCHAIN_CLANG" ]; then
    export CC=clang
    export CXX=clang++

    COVERAGE_CC_FLAGS="-fprofile-instr-generate -fcoverage-mapping"
    COVERAGE_LD_FLAGS=""
fi

# Process build type
BUILD_TYPE_DEBUG="debug"
BUILD_TYPE_RELEASE="release"
BUILD_TYPE_COVERAGE="coverage"
BUILD_TYPE=$3
if [ \( "$BUILD_TYPE" != "$BUILD_TYPE_DEBUG" \) -a \( "$BUILD_TYPE" != "$BUILD_TYPE_RELEASE" \) -a \( "$BUILD_TYPE" != "$BUILD_TYPE_COVERAGE" \) ]; then
    echo "Supplied build type \"$BUILD_TYPE\" is unknown"
    echo "  $BUILD_TYPE_DEBUG"
    echo "  $BUILD_TYPE_RELEASE"
    echo "  $BUILD_TYPE_COVERAGE"
    echo "Are the only known options."
    exit 1
fi

if [ "$BUILD_TYPE" = "$BUILD_TYPE_DEBUG" ]; then
    CMAKE_BUILD_TYPE="Debug"
fi

if [ "$BUILD_TYPE" = "$BUILD_TYPE_RELEASE" ]; then
    CMAKE_BUILD_TYPE="Release"
fi

if [ "$BUILD_TYPE" = "$BUILD_TYPE_COVERAGE" ]; then
    CMAKE_BUILD_TYPE="Debug"
    XE_C_FLAGS="$XE_C_FLAGS $COVERAGE_CC_FLAGS"
    XE_LD_FLAGS="$XE_LD_FLAGS $COVERAGE_LD_FLAGS"
fi

SOURCE_PREFIX="$PWD/dependencies"
BUILD_PREFIX="$PWD/dependencies/.build"
INSTALL_PREFIX="$PWD/local"

# variables for dependencies
CATCH2_BUILD_DIR="$BUILD_PREFIX/$TOOLCHAIN/Catch2/$BUILD_TYPE"
CATCH2_SOURCE_DIR="$SOURCE_PREFIX/Catch2"
CATCH2_INSTALL_PREFIX="$INSTALL_PREFIX/$TOOLCHAIN/Catch2"

GLFW3_BUILD_DIR="$BUILD_PREFIX/$TOOLCHAIN/glfw/$BUILD_TYPE"
GLFW3_SOURCE_DIR="$SOURCE_PREFIX/glfw"
GLFW3_INSTALL_PREFIX="$INSTALL_PREFIX/$TOOLCHAIN/glfw"

install_dependencies(){
    # build catch
    # header-only-lib
    cmake \
        -B$CATCH2_BUILD_DIR \
        -S$CATCH2_SOURCE_DIR \
        -G "Unix Makefiles"  \
        -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" \
        -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
        -DCMAKE_INSTALL_PREFIX=$CATCH2_INSTALL_PREFIX \
        -DCMAKE_DEBUG_POSTFIX="d" \
        -DCATCH_BUILD_TESTING=OFF \
        -DCATCH_INSTALL_DOCS=OFF

    cmake --build $CATCH2_BUILD_DIR
    cmake --install $CATCH2_BUILD_DIR

    # build glfw
    cmake \
        -B$GLFW3_BUILD_DIR \
        -S$GLFW3_SOURCE_DIR \
        -G "Unix Makefiles"  \
        -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" \
        -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
        -DCMAKE_INSTALL_PREFIX=$GLFW3_INSTALL_PREFIX \
        -DGLFW_BUILD_DOCS=OFF \
        -DGLFW_BUILD_EXAMPLES=OFF \
        -DGLFW_BUILD_TESTS=OFF \
        -DCMAKE_DEBUG_POSTFIX="d"

    cmake --build $GLFW3_BUILD_DIR
    cmake --install $GLFW3_BUILD_DIR
}


configure(){
    cmake \
        -B "build/$TOOLCHAIN/$BUILD_TYPE" \
        -G "Unix Makefiles" \
        -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" \
        -DCMAKE_C_FLAGS="$XE_C_FLAGS" \
        -DCMAKE_CXX_FLAGS="$XE_C_FLAGS" \
        -DCMAKE_EXE_LINKER_FLAGS="$XE_LD_FLAGS" \
        -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
        -DXE_PLUGIN_GL=ON -DXE_PLUGIN_ES2=ON -DXE_PLUGIN_GL_GLFW=ON -DXE_UNIT_TEST=ON \
        -Dglfw3_DIR="$GLFW3_INSTALL_PREFIX/lib/cmake/glfw3" \
        -DCatch2_DIR="$CATCH2_INSTALL_PREFIX/lib/cmake/Catch2"
}

coverage_gen(){
    EXECUTABLE=$1
    PROFRAW=$2
    PROFDATA=$3
    OUTPATH=$4
    MODULEPATH=$5
    
    echo "PROFDATA -> $PROFDATA"
    echo "EXECUTABLE -> $EXECUTABLE"
    echo "MODULEPATH -> $MODULEPATH"

    # generate profile data from profile raw information
    xcrun llvm-profdata merge $PROFRAW --instr --sparse=true -o $PROFDATA

    # show coverage report for reporting pipeline purposes
    xcrun llvm-cov report $EXECUTABLE -instr-profile=$PROFDATA  -arch=arm64 "$MODULEPATH/include"

    # export detailed coverage information, for visualization in dashboard-like tool
    #xcrun llvm-cov show -format=html -instr-profile=$PROFDATA $EXECUTABLE -show-line-counts-or-regions --show-branches=count --show-expansions -arch=arm64 "$MODULEPATH/include" "$MODULEPATH/src" -output-dir=$OUTPATH
    xcrun llvm-cov show $EXECUTABLE -instr-profile=$PROFDATA -format=html -show-branches=percent -show-line-counts-or-regions -show-expansions -arch=arm64 "$MODULEPATH/include" -output-dir=$OUTPATH
}

coverage(){
    if [ "$TOOLCHAIN" = "clang" ]; then 
        # build and run the unit tests with coverage data enabled.
        cmake --build build/$TOOLCHAIN/coverage
        cmake --build build/$TOOLCHAIN/coverage --target test

        # TODO: Dinamically list all the executables used in tests.
        XE_SCENE_TEST="./build/$TOOLCHAIN/coverage/src/XE.Scene/XE.Scene.Test"
        XE_MATH_TEST="./build/$TOOLCHAIN/coverage/src/XE.Math/XE.Math.Test"
        XE_GRAPHICS_GL_TEST="./build/$TOOLCHAIN/coverage/src/XE.Graphics.GL/XE.Graphics.GL.UnitTest"

        XE_SCENE_PROFRAW="./build/$TOOLCHAIN/coverage/src/XE.Scene/default.profraw"
        XE_MATH_PROFRAW="./build/$TOOLCHAIN/coverage/src/XE.Math/default.profraw"
        XE_GRAPHICS_GL_PROFRAW="./build/$TOOLCHAIN/coverage/src/XE.Graphics.GL/default.profraw"
        
        XE_SCENE_PROFDATA="coverage/XE.Scene.profdata"
        XE_MATH_PROFDATA="coverage/XE.Math.profdata"
        XE_GRAPHICS_GL_PROFDATA="coverage/XE.Graphics.GL.profdata"

        COVERAGE_FOLDER_SCENE="coverage/XE.Scene"
        COVERAGE_FOLDER_MATH="coverage/XE.Math"
        COVERAGE_FOLDER_GRAPHICS="coverage/XE.Graphics"

        XE_SCENE_PATH="src/XE.Scene"
        XE_MATH_PATH="src/XE.Math"
        XE_GRAPHICS_PATH="src/XE.Graphics"

        coverage_gen $XE_SCENE_TEST         $XE_SCENE_PROFRAW       $XE_SCENE_PROFDATA          $COVERAGE_FOLDER_SCENE    $XE_SCENE_PATH
        coverage_gen $XE_MATH_TEST          $XE_MATH_PROFRAW        $XE_MATH_PROFDATA           $COVERAGE_FOLDER_MATH    $XE_MATH_PATH
        coverage_gen $XE_GRAPHICS_GL_TEST   $XE_GRAPHICS_GL_PROFRAW $XE_GRAPHICS_GL_PROFDATA    $COVERAGE_FOLDER_GRAPHICS    $XE_GRAPHICS_PATH
    else
        echo "Profile information only implemented with the clang toolchain."
        exit 1
    fi
}

if [ "$MODE" = "$MODE_INSTALLDEPS" ]; then
    install_dependencies
fi

if [ "$MODE" = "$MODE_CONFIGURE" ]; then
    configure
fi

if [ "$MODE" = "$MODE_COVERAGE" ]; then
    coverage
fi
